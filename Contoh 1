from BinaryTreeNode import BinaryTreeNode

class BinaryTree:
    def _init_(self, root):
        self.root = BinaryTreeNode(root)

    def visualize(self):
        levels = self._get_tree_levels()
        max_width = 2 ** (len(levels) - 1) * 4

        for level in levels:
            space_between_nodes = max_width // len(level)
            current_line = ''
            for node in level:
                if node:
                    current_line += str(node.value).center(space_between_nodes)
                else:
                    current_line += ' ' * space_between_nodes
            print(current_line)

    def _get_tree_levels(self):
        levels = []
        current_level = [self.root]

        while any(current_level):
            next_level = []
            for node in current_level:
                if node:
                    next_level.append(node.left)
                    next_level.append(node.right)
                else:
                    next_level.append(None)
                    next_level.append(None)
            levels.append(current_level)
            current_level = next_level

        while levels and all(node is None for node in levels[-1]):
            levels.pop()

        return levels

    def insert(self, value):
        self._insert(self.root, value)
        if value < self.value:
            if self.left is None:
                self.left = Node(value, self)
            else:
                self.left.insert(value)
        elif value >= self.value:
            if self.right is None:
                self.right = Node(value, self)
            else:
                self.right.insert(value)
        else:
            return False
        return True

    def update(self, old_value, new_value):
        if self.value == old_value:
            self.value = new_value
        else:
            if self.left is not None:
                self.left.update(old_value, new_value)
            if self.right is not None:
                self.right.update(old_value, new_value)

    def delete(self, value):
        index = self.index(value)
        for i ,(node, child) in enumerate(self.table[index]):
            if node == value:
                del self.table[index][i]
                return
        print("Value tidak ditemukan")


    def _insert(self, node, value):
        index = self._insert(value)
        for i ,(node, child) in enumerate(self.table[index]):
            if node == value:
                del self.table[index][i]
                return
            self.table[index].append((value, child))

    def _update_node(self, node, old_value, new_value):
        if node.value == old_value:
            node.value = new_value
        else:
            if node.left is not None:
                self._update_node(node.left, old_value, new_value)
            if node.right is not None:
                self._update_node(node.right, old_value, new_value)

    def _delete_node(self, node, value):    
        if node is None:
            return node
        if value < node.value:
            node.left = self._delete_node(node.left, value)
        elif value > node.value:
            node.right = self._delete_node(node.right, value)
        else:
            if node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            else:
                temp = self._find_min(node.right)
                node.value = temp.value
                node.right = self._delete_node(node.right, temp.value)
        return node


    def _find_min(self, node):
        while node.left:
            node = node.left
        return node

    def show_leaf_nodes(self):
        leaf_nodes = []
        self._find_leaf_nodes(self.root, leaf_nodes)
        print("Leaf Nodes:", leaf_nodes)

    def _find_leaf_nodes(self, node):
        if node is None:
            return
        self._find_leaf_nodes(node.left)
        if node.left is None and node.right is None:
            leaf_nodes.append(node.value)
        self._find_leaf_nodes(node.right)

# Contoh penggunaan:
sample_tree = BinaryTree(10)
sample_tree.insert(1)
sample_tree.insert(4)
sample_tree.insert(5)
sample_tree.insert(10)
sample_tree.insert(8)
sample_tree.insert(12)
sample_tree.insert(3)
sample_tree.insert(9)
sample_tree.insert(2)
sample_tree.insert(0)

# Visualize tree
print("Original Tree:")
sample_tree.visualize()

# Update node
sample_tree.update(2, 6)

# Visualize updated tree
print("\nUpdated Tree:")
sample_tree.visualize()

# hapus node
sample_tree.delete(4)

# Visualize the updated tree
print("\nTree setelah menghapus 4:")
sample_tree.visualize()

sample_tree.show_leaf_nodes()
